=flexBox($hAlign, $vAlign)
    -webkit-align-items: $vAlign
    -ms-flex-align: $vAlign
    -moz-align-items: $vAlign
    align-items: $vAlign

    display: -webkit-flex
    display: -ms-flexbox
    display: flex

    -webkit-justify-content: $hAlign
    -ms-justify-content: $hAlign
    -moz-justify-content: $hAlign
    justify-content: $hAlign

=boxShadow($color, $opacity)
    -webkit-box-shadow: 0 1px 3px 0 rgba($color, $opacity)
    -moz-box-shadow: 0 1px 3px 0 rgba($color, $opacity)
    box-shadow: 0 1px 3px 0 rgba($color, $opacity)

=border-radius($radius)
    -webkit-border-radius: $radius
    -moz-border-radius: $radius
    -ms-border-radius: $radius
    border-radius: $radius

=transition($type, $time)
    transition: $type $time

=push--auto
    left: auto
    right: auto

// Adiciona o conteudo obrigatorio para o before e after
=pseudo($content: '', $display: block, $pos: absolute)
    content: $content
    display: $display
    position: $pos

// aspecto responsivo, geralmente utilizado para videos, veja exemplo abaixo:
// div
//    +responsive-ratio(16,9)
=responsive-ratio($x,$y, $pseudo: false)
    $padding: unquote( ( $y / $x ) * 100 + '%' )

    @if $pseudo
        &:before
            padding-top: $padding
            +pseudo($pos: relative)
            width: 100%

    @else
        padding-top: $padding


//triangulos com css
=css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false)
    height: 0
    +pseudo($pos: $position)
    width: 0

    @if $round
        border-radius: 3px

    @if $direction == down
        border-left: $size solid transparent
        border-right: $size solid transparent
        border-top: $size solid $color
        margin-top: 0 - round( $size / 2.5 )
    @else if $direction == up
        border-bottom: $size solid $color
        border-left: $size solid transparent
        border-right: $size solid transparent
        margin-bottom: 0 - round( $size / 2.5 )
    @else if $direction == right
        border-bottom: $size solid transparent
        border-left: $size solid $color
        border-top: $size solid transparent
        margin-right: -$size
    @else if  $direction == left
        border-bottom: $size solid transparent
        border-right: $size solid $color
        border-top: $size solid transparent
        margin-left: -$size

//media queries
$breakpoints: ("phone-small": 320px, "phone": 400px, "phone-wide": 480px, "phablet": 560px, "tablet-small": 640px, "tablet": 768px, "tablet-wide": 1024px, "desktop": 1248px, "desktop-wide": 1440px )

=mq($width, $type: min)
    @if map_has_key($breakpoints, $width)
        $width: map_get($breakpoints, $width)

    @if $type == max
        $width: $width - 1px

    @media only screen and (#{$type}-width: $width)
        @content

//Converte o unit do atributo especificado em "px" e "rem"
// +rem(font-size, 20px)
// retornaria no css: font-size: 20px; font-size: 1.25rem
@function parseInt($n)
    @return $n / ($n * 0 + 1)

=rem($property, $values)
    $px : ()
    $rem: ()

    @each $value in $values /* 4 */

        @if $value == 0 or $value == auto /* 5 */
            $px : append($px , $value)
            $rem: append($rem, $value)


        @else
            $unit: unit($value);
            $val: parseInt($value);

            @if $unit == "px"
                $px : append($px,  $value)
                $rem: append($rem, ($val / 10 + rem))

            @if $unit == "rem"
                $px : append($px,  ($val * 10 + px))
                $rem: append($rem, $value);

    @if $px == $rem
        #{$property}: $px
    @else
        #{$property}: $px
        #{$property}: $rem

=buttons($type, $color, $text : $white)
    &.button-#{$type}
        background-color: $color
        color: $text

        &.-disabled
            background-color: lighten($color, 50%)

        &:hover
            background-color: lighten($color, 15%)

=font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false )
  @font-face
    font-family: $font-family
    font-weight: $weight
    font-style: $style

    @if $asset-pipeline == true
        src: font-url('#{$file-path}.eot')
        src: font-url('#{$file-path}.eot?#iefix') format('embedded-opentype')
        src: font-url('#{$file-path}.otf')  format('opentype')
        src: font-url('#{$file-path}.woff') format('woff')
        src: font-url('#{$file-path}.ttf') format('truetype')
        src: font-url('#{$file-path}.svg##{$font-family}') format('svg')

    @else
        src: url('#{$file-path}.eot')
        src: url('#{$file-path}.eot?#iefix') format('embedded-opentype')
        src: url('#{$file-path}.otf')  format('opentype')
        src: url('#{$file-path}.woff') format('woff')
        src: url('#{$file-path}.ttf') format('truetype')
        src: url('#{$file-path}.svg##{$font-family}') format('svg')
